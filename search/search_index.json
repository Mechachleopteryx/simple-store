{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Simple Store \u00b6 This project is stable and being incubated for long-term support. Simple yet performant asynchronous file storage for Android. SimpleStore aims to provide developers an extremely robust and performant solution for storing key-value data on disk asynchronously. It is built using only Android and Java primitives and avoids taking on external dependencies making it ideal for critical startup storage. It has no opinion on how data is serialized, only storing string - byte[] pairs of small to moderate size. The core library only exposes a thread-safe, executor-explicit async API ensuring clear thread selection and no UI jank. All values are stored on disk as plain files that are \u201cnamespaced\u201d in a matching on-disk folder structure. The library also supports configuring a namespace to store data on a cache or transient partition. Basic usage \u00b6 To include in a gradle project, add to your dependencies: dependencies { implementation 'com.uber.simplestore:simplestore:0.0.8' // If using protocol buffers, also add: implementation 'com.uber.simplestore:simplestore-proto:0.0.8' } Out of the box, SimpleStore uses ListenableFuture to store byte[] , String , primitives and protocol buffers on internal storage. SimpleStore simpleStore = SimpleStoreFactory . create ( this , \"<some-uuid-or-name>\" ); ListenableFuture < String > put = simpleStore . putString ( \"some_key\" , \"Foo value\" ); Futures . addCallback ( put , new FutureCallback < String > () { @Override public void onSuccess ( @NonNull String s ) { } @Override public void onFailure ( @NonNull Throwable t ) { Log . e ( \"MyActivity\" , \"Save failure\" , t ); } }, mainExecutor ()); simpleStore . close (); Note that if you use RxJava, Rx comes with a fromFuture method that allows you to wrap ListenableFuture : Single < String > value = Single . fromFuture ( simpleStore . getString ( \"some_key\" )); Fundamentally Async \u00b6 IO operations are fundamentally async, and any storage solution should be async all the way through. The implementation is written using async work queues. This allows us to implement under-the-hood optimizations that do not block consumers such as prefetching and pruning old cached values. Futures.get from Guava is available for consumers who wish to run synchronously. Interface \u00b6 Only one interface is exposed for general use. Implementations of the interface provide a factory method for instantiating any variations. Usage: SimpleStore store = SimpleStoreFactory . create ( context , \u201c feature / mystuff \u201d , NamespaceConfig . DEFAULT ); ListenableFuture < String > value = store . putString ( \"some_key\" , value ); The interface is designed to allow composition with higher level wrappers such as a protocol buffers, Rx, or ListenableFuture transforms. ListenableFuture was chosen over Rx for the implementation as: * Future transformations require explicit assignment to an Executor, making it difficult to accidentally perform IO operations in the incorrect pool. * Executors do not suffer from the round-robin scheduler design of Rx, making deadlock between IO work impossible. * AndroidX and most Google libraries already ship ListenableFuture and associated Guava classes with them, so most Android apps can take on ListenableFuture without increasing binary size. * Interop with Futures is built into Rx via Observables.fromFuture . The base interface and implementation purposely leave out a synchronous API as disk IO is fundamentally async. A safe-ish synchronous API can be obtained via Futures#getChecked if absolutely needed for compatibility reasons, but most users who think they need sync will probably find the Futures helpers adequate for their needs. Closing a namespace \u00b6 SimpleStore is closable per namespace, and may only have one open instance per namespace process-wide. When a namespace is closed, the in-memory cache is destroyed. The store will deliver failures to all pending callbacks when closed. This ensures that the consumer is always notified if data does not make it to disk and can handle the failure appropriately such as logging a non-fatal. Any reads or writes attempted on the store after closure will result in an exception. In the future, we can arbitrarily clear portions of the memory cache of an open namespace when desired such as when the OS informs of a trim level. Since the API is fully async, consumers will not be janked and will just see original load latencies. Threading \u00b6 All operations are guaranteed to be executed in-order within the same namespace. A singular cached thread pool backs all stores process wide, and can be replaced with a custom executor via a static configuration method. It is safe to enqueue any operation from any thread, including the main thread. All future callbacks are paired with an executor to be run on, this forces parsing or other processing actions to get out of the way of ordered disk I/O. This model makes deadlock across namespaces impossible, as even a blockingGet cannot be issued on the ordered IO executor. Adopting this model leaves us room to experiment later with using explicit thread priority for different namespaces. License \u00b6 Copyright (C) 2020 Uber Technologies Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#simple-store","text":"This project is stable and being incubated for long-term support. Simple yet performant asynchronous file storage for Android. SimpleStore aims to provide developers an extremely robust and performant solution for storing key-value data on disk asynchronously. It is built using only Android and Java primitives and avoids taking on external dependencies making it ideal for critical startup storage. It has no opinion on how data is serialized, only storing string - byte[] pairs of small to moderate size. The core library only exposes a thread-safe, executor-explicit async API ensuring clear thread selection and no UI jank. All values are stored on disk as plain files that are \u201cnamespaced\u201d in a matching on-disk folder structure. The library also supports configuring a namespace to store data on a cache or transient partition.","title":"Simple Store"},{"location":"#basic-usage","text":"To include in a gradle project, add to your dependencies: dependencies { implementation 'com.uber.simplestore:simplestore:0.0.8' // If using protocol buffers, also add: implementation 'com.uber.simplestore:simplestore-proto:0.0.8' } Out of the box, SimpleStore uses ListenableFuture to store byte[] , String , primitives and protocol buffers on internal storage. SimpleStore simpleStore = SimpleStoreFactory . create ( this , \"<some-uuid-or-name>\" ); ListenableFuture < String > put = simpleStore . putString ( \"some_key\" , \"Foo value\" ); Futures . addCallback ( put , new FutureCallback < String > () { @Override public void onSuccess ( @NonNull String s ) { } @Override public void onFailure ( @NonNull Throwable t ) { Log . e ( \"MyActivity\" , \"Save failure\" , t ); } }, mainExecutor ()); simpleStore . close (); Note that if you use RxJava, Rx comes with a fromFuture method that allows you to wrap ListenableFuture : Single < String > value = Single . fromFuture ( simpleStore . getString ( \"some_key\" ));","title":"Basic usage"},{"location":"#fundamentally-async","text":"IO operations are fundamentally async, and any storage solution should be async all the way through. The implementation is written using async work queues. This allows us to implement under-the-hood optimizations that do not block consumers such as prefetching and pruning old cached values. Futures.get from Guava is available for consumers who wish to run synchronously.","title":"Fundamentally Async"},{"location":"#interface","text":"Only one interface is exposed for general use. Implementations of the interface provide a factory method for instantiating any variations. Usage: SimpleStore store = SimpleStoreFactory . create ( context , \u201c feature / mystuff \u201d , NamespaceConfig . DEFAULT ); ListenableFuture < String > value = store . putString ( \"some_key\" , value ); The interface is designed to allow composition with higher level wrappers such as a protocol buffers, Rx, or ListenableFuture transforms. ListenableFuture was chosen over Rx for the implementation as: * Future transformations require explicit assignment to an Executor, making it difficult to accidentally perform IO operations in the incorrect pool. * Executors do not suffer from the round-robin scheduler design of Rx, making deadlock between IO work impossible. * AndroidX and most Google libraries already ship ListenableFuture and associated Guava classes with them, so most Android apps can take on ListenableFuture without increasing binary size. * Interop with Futures is built into Rx via Observables.fromFuture . The base interface and implementation purposely leave out a synchronous API as disk IO is fundamentally async. A safe-ish synchronous API can be obtained via Futures#getChecked if absolutely needed for compatibility reasons, but most users who think they need sync will probably find the Futures helpers adequate for their needs.","title":"Interface"},{"location":"#closing-a-namespace","text":"SimpleStore is closable per namespace, and may only have one open instance per namespace process-wide. When a namespace is closed, the in-memory cache is destroyed. The store will deliver failures to all pending callbacks when closed. This ensures that the consumer is always notified if data does not make it to disk and can handle the failure appropriately such as logging a non-fatal. Any reads or writes attempted on the store after closure will result in an exception. In the future, we can arbitrarily clear portions of the memory cache of an open namespace when desired such as when the OS informs of a trim level. Since the API is fully async, consumers will not be janked and will just see original load latencies.","title":"Closing a namespace"},{"location":"#threading","text":"All operations are guaranteed to be executed in-order within the same namespace. A singular cached thread pool backs all stores process wide, and can be replaced with a custom executor via a static configuration method. It is safe to enqueue any operation from any thread, including the main thread. All future callbacks are paired with an executor to be run on, this forces parsing or other processing actions to get out of the way of ordered disk I/O. This model makes deadlock across namespaces impossible, as even a blockingGet cannot be issued on the ordered IO executor. Adopting this model leaves us room to experiment later with using explicit thread priority for different namespaces.","title":"Threading"},{"location":"#license","text":"Copyright (C) 2020 Uber Technologies Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 Version 0.0.8 \u00b6 Upgrade to latest protolite runtime. Build with and target Android 11. Version 0.0.7 \u00b6 Upgrade to protolite\u2019s new runtime. Version 0.0.6 \u00b6 Move to older protolite until Google resolves issues on older devices. New deleteAllNow() feature Version 0.0.5 \u00b6 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-008","text":"Upgrade to latest protolite runtime. Build with and target Android 11.","title":"Version 0.0.8"},{"location":"changelog/#version-007","text":"Upgrade to protolite\u2019s new runtime.","title":"Version 0.0.7"},{"location":"changelog/#version-006","text":"Move to older protolite until Google resolves issues on older devices. New deleteAllNow() feature","title":"Version 0.0.6"},{"location":"changelog/#version-005","text":"Initial release","title":"Version 0.0.5"},{"location":"code-of-conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mobile-open-source@uber.com . The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/\u00bc","title":"Code of Conduct"},{"location":"code-of-conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mobile-open-source@uber.com . The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership.","title":"Enforcement"},{"location":"code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/\u00bc","title":"Attribution"},{"location":"contributing/","text":"Contributing to SimpleStore \u00b6 Uber welcomes contributions of all kinds and sizes. This includes everything from from simple bug reports to large features. Workflow \u00b6 We love GitHub issues! For small feature requests, an issue first proposing it for discussion or demo implementation in a PR suffice. For big features, please open an issue so that we can agree on the direction, and hopefully avoid investing a lot of time on a feature that might need reworking. Small pull requests for things like typos, bug fixes, etc are always welcome. DOs and DON\u2019Ts \u00b6 DO follow our coding style DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. DO keep the discussions focused. When a new or related topic comes up it\u2019s often better to create new issue than to side track the discussion. DON\u2019T submit PRs that alter licensing related files or headers. If you believe there\u2019s a problem with them, file an issue and we\u2019ll be happy to discuss it. Guiding Principles \u00b6 We allow anyone to participate in our projects. Tasks can be carried out by anyone that demonstrates the capability to complete them Always be respectful of one another. Assume the best in others and act with empathy at all times Collaborate closely with individuals maintaining the project or experienced users. Getting ideas out in the open and seeing a proposal before it\u2019s a pull request helps reduce redundancy and ensures we\u2019re all connected to the decision making process","title":"Contributing"},{"location":"contributing/#contributing-to-simplestore","text":"Uber welcomes contributions of all kinds and sizes. This includes everything from from simple bug reports to large features.","title":"Contributing to SimpleStore"},{"location":"contributing/#workflow","text":"We love GitHub issues! For small feature requests, an issue first proposing it for discussion or demo implementation in a PR suffice. For big features, please open an issue so that we can agree on the direction, and hopefully avoid investing a lot of time on a feature that might need reworking. Small pull requests for things like typos, bug fixes, etc are always welcome.","title":"Workflow"},{"location":"contributing/#dos-and-donts","text":"DO follow our coding style DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. DO keep the discussions focused. When a new or related topic comes up it\u2019s often better to create new issue than to side track the discussion. DON\u2019T submit PRs that alter licensing related files or headers. If you believe there\u2019s a problem with them, file an issue and we\u2019ll be happy to discuss it.","title":"DOs and DON'Ts"},{"location":"contributing/#guiding-principles","text":"We allow anyone to participate in our projects. Tasks can be carried out by anyone that demonstrates the capability to complete them Always be respectful of one another. Assume the best in others and act with empathy at all times Collaborate closely with individuals maintaining the project or experienced users. Getting ideas out in the open and seeing a proposal before it\u2019s a pull request helps reduce redundancy and ensures we\u2019re all connected to the decision making process","title":"Guiding Principles"},{"location":"0.x/protosimplestore/","text":"protosimplestore Packages \u00b6 Name Summary com.uber.simplestore.proto com.uber.simplestore.proto.impl Index \u00b6 All Types","title":"SimpleStore for Protocol Buffers"},{"location":"0.x/protosimplestore/#packages","text":"Name Summary com.uber.simplestore.proto com.uber.simplestore.proto.impl","title":"Packages"},{"location":"0.x/protosimplestore/#index","text":"All Types","title":"Index"},{"location":"0.x/protosimplestore/alltypes/","text":"All Types \u00b6 Name Summary com.uber.simplestore.proto.SimpleProtoStore Read and write protocol buffer values from keys on disk. com.uber.simplestore.proto.impl.SimpleProtoStoreFactory Obtain an instance of a storage namespace with proto support. Only one instance per namespace may exist at any time. com.uber.simplestore.proto.impl.SimpleProtoStoreImpl","title":"Index"},{"location":"0.x/protosimplestore/alltypes/#all-types","text":"Name Summary com.uber.simplestore.proto.SimpleProtoStore Read and write protocol buffer values from keys on disk. com.uber.simplestore.proto.impl.SimpleProtoStoreFactory Obtain an instance of a storage namespace with proto support. Only one instance per namespace may exist at any time. com.uber.simplestore.proto.impl.SimpleProtoStoreImpl","title":"All Types"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/","text":"protosimplestore / com.uber.simplestore.proto Package com.uber.simplestore.proto \u00b6 Types \u00b6 Name Summary SimpleProtoStore interface SimpleProtoStore : SimpleStore Read and write protocol buffer values from keys on disk.","title":"Index"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/#package-comubersimplestoreproto","text":"","title":"Package com.uber.simplestore.proto"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/#types","text":"Name Summary SimpleProtoStore interface SimpleProtoStore : SimpleStore Read and write protocol buffer values from keys on disk.","title":"Types"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/-simple-proto-store/","text":"protosimplestore / com.uber.simplestore.proto / SimpleProtoStore SimpleProtoStore \u00b6 interface SimpleProtoStore : SimpleStore Read and write protocol buffer values from keys on disk. Functions \u00b6 Name Summary get abstract fun <T : MessageLite!> get(key: String !, parser: Parser!): ListenableFuture! Read a protocol buffer from disk put abstract fun <T : MessageLite!> put(key: String !, value: T ): ListenableFuture! Write a protocol buffer to disk Inheritors \u00b6 Name Summary SimpleProtoStoreImpl class SimpleProtoStoreImpl : SimpleProtoStore","title":"Index"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/-simple-proto-store/#simpleprotostore","text":"interface SimpleProtoStore : SimpleStore Read and write protocol buffer values from keys on disk.","title":"SimpleProtoStore"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/-simple-proto-store/#functions","text":"Name Summary get abstract fun <T : MessageLite!> get(key: String !, parser: Parser!): ListenableFuture! Read a protocol buffer from disk put abstract fun <T : MessageLite!> put(key: String !, value: T ): ListenableFuture! Write a protocol buffer to disk","title":"Functions"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/-simple-proto-store/#inheritors","text":"Name Summary SimpleProtoStoreImpl class SimpleProtoStoreImpl : SimpleProtoStore","title":"Inheritors"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/-simple-proto-store/get/","text":"protosimplestore / com.uber.simplestore.proto / SimpleProtoStore / get get \u00b6 abstract fun <T : MessageLite!> get(key: String !, parser: Parser!): ListenableFuture! Read a protocol buffer from disk Parameters \u00b6 key - String !: to read from parser - Parser!: to parse with <T> - proto type Return ListenableFuture!: value if present, default instance of T if absent","title":"Get"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/-simple-proto-store/get/#get","text":"abstract fun <T : MessageLite!> get(key: String !, parser: Parser!): ListenableFuture! Read a protocol buffer from disk","title":"get"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/-simple-proto-store/get/#parameters","text":"key - String !: to read from parser - Parser!: to parse with <T> - proto type Return ListenableFuture!: value if present, default instance of T if absent","title":"Parameters"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/-simple-proto-store/put/","text":"protosimplestore / com.uber.simplestore.proto / SimpleProtoStore / put put \u00b6 abstract fun <T : MessageLite!> put(key: String !, value: T ): ListenableFuture! Write a protocol buffer to disk Parameters \u00b6 key - String !: to store to value - T : to store <T> - proto type Return ListenableFuture!: value if success","title":"Put"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/-simple-proto-store/put/#put","text":"abstract fun <T : MessageLite!> put(key: String !, value: T ): ListenableFuture! Write a protocol buffer to disk","title":"put"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto/-simple-proto-store/put/#parameters","text":"key - String !: to store to value - T : to store <T> - proto type Return ListenableFuture!: value if success","title":"Parameters"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/","text":"protosimplestore / com.uber.simplestore.proto.impl Package com.uber.simplestore.proto.impl \u00b6 Types \u00b6 Name Summary SimpleProtoStoreFactory class SimpleProtoStoreFactory Obtain an instance of a storage namespace with proto support. Only one instance per namespace may exist at any time. SimpleProtoStoreImpl class SimpleProtoStoreImpl : SimpleProtoStore","title":"Index"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/#package-comubersimplestoreprotoimpl","text":"","title":"Package com.uber.simplestore.proto.impl"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/#types","text":"Name Summary SimpleProtoStoreFactory class SimpleProtoStoreFactory Obtain an instance of a storage namespace with proto support. Only one instance per namespace may exist at any time. SimpleProtoStoreImpl class SimpleProtoStoreImpl : SimpleProtoStore","title":"Types"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-factory/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreFactory SimpleProtoStoreFactory \u00b6 class SimpleProtoStoreFactory Obtain an instance of a storage namespace with proto support. Only one instance per namespace may exist at any time. Delegates to SimpleStoreFactory#create(Context, String, NamespaceConfig). Constructors \u00b6 Name Summary <init> SimpleProtoStoreFactory() Obtain an instance of a storage namespace with proto support. Only one instance per namespace may exist at any time. Functions \u00b6 Name Summary create static fun create(context: Context!, namespace: String !): SimpleProtoStore ! static fun create(context: Context!, namespace: String !, config: NamespaceConfig!): SimpleProtoStore !","title":"Index"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-factory/#simpleprotostorefactory","text":"class SimpleProtoStoreFactory Obtain an instance of a storage namespace with proto support. Only one instance per namespace may exist at any time. Delegates to SimpleStoreFactory#create(Context, String, NamespaceConfig).","title":"SimpleProtoStoreFactory"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-factory/#constructors","text":"Name Summary <init> SimpleProtoStoreFactory() Obtain an instance of a storage namespace with proto support. Only one instance per namespace may exist at any time.","title":"Constructors"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-factory/#functions","text":"Name Summary create static fun create(context: Context!, namespace: String !): SimpleProtoStore ! static fun create(context: Context!, namespace: String !, config: NamespaceConfig!): SimpleProtoStore !","title":"Functions"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-factory/-init-/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreFactory / <init> <init> \u00b6 SimpleProtoStoreFactory() Obtain an instance of a storage namespace with proto support. Only one instance per namespace may exist at any time. Delegates to SimpleStoreFactory#create(Context, String, NamespaceConfig).","title":" init "},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-factory/-init-/#init","text":"SimpleProtoStoreFactory() Obtain an instance of a storage namespace with proto support. Only one instance per namespace may exist at any time. Delegates to SimpleStoreFactory#create(Context, String, NamespaceConfig).","title":"&lt;init&gt;"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-factory/create/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreFactory / create create \u00b6 static fun create(context: Context!, namespace: String !): SimpleProtoStore ! static fun create(context: Context!, namespace: String !, config: NamespaceConfig!): SimpleProtoStore !","title":"Create"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-factory/create/#create","text":"static fun create(context: Context!, namespace: String !): SimpleProtoStore ! static fun create(context: Context!, namespace: String !, config: NamespaceConfig!): SimpleProtoStore !","title":"create"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreImpl SimpleProtoStoreImpl \u00b6 class SimpleProtoStoreImpl : SimpleProtoStore Functions \u00b6 Name Summary clear fun clear(): ListenableFuture! close fun close(): Unit contains fun contains(key: String !): ListenableFuture! deleteAllNow fun deleteAllNow(): ListenableFuture! get fun <T : MessageLite!> get(key: String !, parser: Parser!): ListenableFuture! fun get(key: String !): ListenableFuture! getString fun getString(key: String !): ListenableFuture! put fun <T : MessageLite!> put(key: String !, value: T ): ListenableFuture! fun put(key: String !, value: ByteArray !): ListenableFuture! putString fun putString(key: String !, value: String !): ListenableFuture! remove fun remove(key: String !): ListenableFuture!","title":"Index"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/#simpleprotostoreimpl","text":"class SimpleProtoStoreImpl : SimpleProtoStore","title":"SimpleProtoStoreImpl"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/#functions","text":"Name Summary clear fun clear(): ListenableFuture! close fun close(): Unit contains fun contains(key: String !): ListenableFuture! deleteAllNow fun deleteAllNow(): ListenableFuture! get fun <T : MessageLite!> get(key: String !, parser: Parser!): ListenableFuture! fun get(key: String !): ListenableFuture! getString fun getString(key: String !): ListenableFuture! put fun <T : MessageLite!> put(key: String !, value: T ): ListenableFuture! fun put(key: String !, value: ByteArray !): ListenableFuture! putString fun putString(key: String !, value: String !): ListenableFuture! remove fun remove(key: String !): ListenableFuture!","title":"Functions"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/clear/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreImpl / clear clear \u00b6 fun clear(): ListenableFuture!","title":"Clear"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/clear/#clear","text":"fun clear(): ListenableFuture!","title":"clear"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/close/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreImpl / close close \u00b6 fun close(): Unit","title":"Close"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/close/#close","text":"fun close(): Unit","title":"close"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/contains/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreImpl / contains contains \u00b6 fun contains(key: String !): ListenableFuture!","title":"Contains"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/contains/#contains","text":"fun contains(key: String !): ListenableFuture!","title":"contains"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/delete-all-now/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreImpl / deleteAllNow deleteAllNow \u00b6 fun deleteAllNow(): ListenableFuture!","title":"Delete all now"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/delete-all-now/#deleteallnow","text":"fun deleteAllNow(): ListenableFuture!","title":"deleteAllNow"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/get-string/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreImpl / getString getString \u00b6 fun getString(key: String !): ListenableFuture!","title":"Get string"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/get-string/#getstring","text":"fun getString(key: String !): ListenableFuture!","title":"getString"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/get/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreImpl / get get \u00b6 fun <T : MessageLite!> get(key: String !, parser: Parser!): ListenableFuture! Overrides SimpleProtoStore.get fun get(key: String !): ListenableFuture!","title":"Get"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/get/#get","text":"fun <T : MessageLite!> get(key: String !, parser: Parser!): ListenableFuture! Overrides SimpleProtoStore.get fun get(key: String !): ListenableFuture!","title":"get"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/put-string/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreImpl / putString putString \u00b6 fun putString(key: String !, value: String !): ListenableFuture!","title":"Put string"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/put-string/#putstring","text":"fun putString(key: String !, value: String !): ListenableFuture!","title":"putString"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/put/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreImpl / put put \u00b6 fun <T : MessageLite!> put(key: String !, value: T ): ListenableFuture! Overrides SimpleProtoStore.put fun put(key: String !, value: ByteArray !): ListenableFuture!","title":"Put"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/put/#put","text":"fun <T : MessageLite!> put(key: String !, value: T ): ListenableFuture! Overrides SimpleProtoStore.put fun put(key: String !, value: ByteArray !): ListenableFuture!","title":"put"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/remove/","text":"protosimplestore / com.uber.simplestore.proto.impl / SimpleProtoStoreImpl / remove remove \u00b6 fun remove(key: String !): ListenableFuture!","title":"Remove"},{"location":"0.x/protosimplestore/com.uber.simplestore.proto.impl/-simple-proto-store-impl/remove/#remove","text":"fun remove(key: String !): ListenableFuture!","title":"remove"},{"location":"0.x/sample/","text":"sample Packages \u00b6 Name Summary com.uber.simplestore.sample Index \u00b6 All Types","title":"Sample App"},{"location":"0.x/sample/#packages","text":"Name Summary com.uber.simplestore.sample","title":"Packages"},{"location":"0.x/sample/#index","text":"All Types","title":"Index"},{"location":"0.x/sample/alltypes/","text":"All Types \u00b6 Name Summary com.uber.simplestore.sample.JavaActivity Store and retrieve a text field. com.uber.simplestore.sample.JavaActivity Store and retrieve a text field. com.uber.simplestore.sample.KotlinActivity Store and retrieve a text field. com.uber.simplestore.sample.SampleApplication com.uber.simplestore.sample.SampleApplication","title":"Index"},{"location":"0.x/sample/alltypes/#all-types","text":"Name Summary com.uber.simplestore.sample.JavaActivity Store and retrieve a text field. com.uber.simplestore.sample.JavaActivity Store and retrieve a text field. com.uber.simplestore.sample.KotlinActivity Store and retrieve a text field. com.uber.simplestore.sample.SampleApplication com.uber.simplestore.sample.SampleApplication","title":"All Types"},{"location":"0.x/sample/com.uber.simplestore.sample/","text":"sample / com.uber.simplestore.sample Package com.uber.simplestore.sample \u00b6 Types \u00b6 Name Summary JavaActivity open class JavaActivity : AppCompatActivity open class JavaActivity : AppCompatActivity Store and retrieve a text field. KotlinActivity class KotlinActivity : AppCompatActivity Store and retrieve a text field. SampleApplication open class SampleApplication : Application open class SampleApplication : Application","title":"Index"},{"location":"0.x/sample/com.uber.simplestore.sample/#package-comubersimplestoresample","text":"","title":"Package com.uber.simplestore.sample"},{"location":"0.x/sample/com.uber.simplestore.sample/#types","text":"Name Summary JavaActivity open class JavaActivity : AppCompatActivity open class JavaActivity : AppCompatActivity Store and retrieve a text field. KotlinActivity class KotlinActivity : AppCompatActivity Store and retrieve a text field. SampleApplication open class SampleApplication : Application open class SampleApplication : Application","title":"Types"},{"location":"0.x/sample/com.uber.simplestore.sample/-java-activity/","text":"sample / com.uber.simplestore.sample / JavaActivity JavaActivity \u00b6 open class JavaActivity : AppCompatActivity open class JavaActivity : AppCompatActivity Store and retrieve a text field.","title":"Index"},{"location":"0.x/sample/com.uber.simplestore.sample/-java-activity/#javaactivity","text":"open class JavaActivity : AppCompatActivity open class JavaActivity : AppCompatActivity Store and retrieve a text field.","title":"JavaActivity"},{"location":"0.x/sample/com.uber.simplestore.sample/-java-activity/-init-/","text":"sample / com.uber.simplestore.sample / JavaActivity / <init> <init> \u00b6 JavaActivity() JavaActivity() Store and retrieve a text field.","title":" init "},{"location":"0.x/sample/com.uber.simplestore.sample/-java-activity/-init-/#init","text":"JavaActivity() JavaActivity() Store and retrieve a text field.","title":"&lt;init&gt;"},{"location":"0.x/sample/com.uber.simplestore.sample/-java-activity/on-create/","text":"sample / com.uber.simplestore.sample / JavaActivity / onCreate onCreate \u00b6 protected open fun onCreate(savedInstanceState: Bundle ?): Unit protected open fun onCreate(savedInstanceState: Bundle ?): Unit","title":"On create"},{"location":"0.x/sample/com.uber.simplestore.sample/-java-activity/on-create/#oncreate","text":"protected open fun onCreate(savedInstanceState: Bundle ?): Unit protected open fun onCreate(savedInstanceState: Bundle ?): Unit","title":"onCreate"},{"location":"0.x/sample/com.uber.simplestore.sample/-java-activity/on-destroy/","text":"sample / com.uber.simplestore.sample / JavaActivity / onDestroy onDestroy \u00b6 protected open fun onDestroy(): Unit protected open fun onDestroy(): Unit","title":"On destroy"},{"location":"0.x/sample/com.uber.simplestore.sample/-java-activity/on-destroy/#ondestroy","text":"protected open fun onDestroy(): Unit protected open fun onDestroy(): Unit","title":"onDestroy"},{"location":"0.x/sample/com.uber.simplestore.sample/-kotlin-activity/","text":"sample / com.uber.simplestore.sample / KotlinActivity KotlinActivity \u00b6 class KotlinActivity : AppCompatActivity Store and retrieve a text field. Constructors \u00b6 Name Summary <init> KotlinActivity() Store and retrieve a text field. Functions \u00b6 Name Summary onCreate fun onCreate(savedInstanceState: Bundle ?): Unit onDestroy fun onDestroy(): Unit","title":"Index"},{"location":"0.x/sample/com.uber.simplestore.sample/-kotlin-activity/#kotlinactivity","text":"class KotlinActivity : AppCompatActivity Store and retrieve a text field.","title":"KotlinActivity"},{"location":"0.x/sample/com.uber.simplestore.sample/-kotlin-activity/#constructors","text":"Name Summary <init> KotlinActivity() Store and retrieve a text field.","title":"Constructors"},{"location":"0.x/sample/com.uber.simplestore.sample/-kotlin-activity/#functions","text":"Name Summary onCreate fun onCreate(savedInstanceState: Bundle ?): Unit onDestroy fun onDestroy(): Unit","title":"Functions"},{"location":"0.x/sample/com.uber.simplestore.sample/-kotlin-activity/-init-/","text":"sample / com.uber.simplestore.sample / KotlinActivity / <init> <init> \u00b6 KotlinActivity() Store and retrieve a text field.","title":" init "},{"location":"0.x/sample/com.uber.simplestore.sample/-kotlin-activity/-init-/#init","text":"KotlinActivity() Store and retrieve a text field.","title":"&lt;init&gt;"},{"location":"0.x/sample/com.uber.simplestore.sample/-kotlin-activity/on-create/","text":"sample / com.uber.simplestore.sample / KotlinActivity / onCreate onCreate \u00b6 protected fun onCreate(savedInstanceState: Bundle ?): Unit","title":"On create"},{"location":"0.x/sample/com.uber.simplestore.sample/-kotlin-activity/on-create/#oncreate","text":"protected fun onCreate(savedInstanceState: Bundle ?): Unit","title":"onCreate"},{"location":"0.x/sample/com.uber.simplestore.sample/-kotlin-activity/on-destroy/","text":"sample / com.uber.simplestore.sample / KotlinActivity / onDestroy onDestroy \u00b6 protected fun onDestroy(): Unit","title":"On destroy"},{"location":"0.x/sample/com.uber.simplestore.sample/-kotlin-activity/on-destroy/#ondestroy","text":"protected fun onDestroy(): Unit","title":"onDestroy"},{"location":"0.x/sample/com.uber.simplestore.sample/-sample-application/","text":"sample / com.uber.simplestore.sample / SampleApplication SampleApplication \u00b6 open class SampleApplication : Application open class SampleApplication : Application","title":"Index"},{"location":"0.x/sample/com.uber.simplestore.sample/-sample-application/#sampleapplication","text":"open class SampleApplication : Application open class SampleApplication : Application","title":"SampleApplication"},{"location":"0.x/sample/com.uber.simplestore.sample/-sample-application/-init-/","text":"sample / com.uber.simplestore.sample / SampleApplication / <init> <init> \u00b6 SampleApplication() SampleApplication()","title":" init "},{"location":"0.x/sample/com.uber.simplestore.sample/-sample-application/-init-/#init","text":"SampleApplication() SampleApplication()","title":"&lt;init&gt;"},{"location":"0.x/sample/com.uber.simplestore.sample/-sample-application/on-create/","text":"sample / com.uber.simplestore.sample / SampleApplication / onCreate onCreate \u00b6 open fun onCreate(): Unit open fun onCreate(): Unit","title":"On create"},{"location":"0.x/sample/com.uber.simplestore.sample/-sample-application/on-create/#oncreate","text":"open fun onCreate(): Unit open fun onCreate(): Unit","title":"onCreate"},{"location":"0.x/simplestore/","text":"simplestore Packages \u00b6 Name Summary com.uber.simplestore com.uber.simplestore.executors com.uber.simplestore.impl com.uber.simplestore.primitive Index \u00b6 All Types","title":"SimpleStore"},{"location":"0.x/simplestore/#packages","text":"Name Summary com.uber.simplestore com.uber.simplestore.executors com.uber.simplestore.impl com.uber.simplestore.primitive","title":"Packages"},{"location":"0.x/simplestore/#index","text":"All Types","title":"Index"},{"location":"0.x/simplestore/alltypes/","text":"All Types \u00b6 Name Summary com.uber.simplestore.NamespaceConfig Configure how the store accesses a namespace. com.uber.simplestore.primitive.PrimitiveSimpleStore Store primitives on disk. com.uber.simplestore.primitive.PrimitiveSimpleStoreFactory com.uber.simplestore.SimpleStore Fast, reliable storage. com.uber.simplestore.SimpleStoreConfig Configure executors used by SimpleStore. com.uber.simplestore.impl.SimpleStoreFactory Obtain a SimpleStore interface that can read and write into a namespace. com.uber.simplestore.SimpleStoreHelpers Useful wrappers for common storage operations. com.uber.simplestore.executors.StorageExecutors Like MoreExecutors, but no Guava. com.uber.simplestore.StoreClosedException Thrown when attempting to use a closed store.","title":"Index"},{"location":"0.x/simplestore/alltypes/#all-types","text":"Name Summary com.uber.simplestore.NamespaceConfig Configure how the store accesses a namespace. com.uber.simplestore.primitive.PrimitiveSimpleStore Store primitives on disk. com.uber.simplestore.primitive.PrimitiveSimpleStoreFactory com.uber.simplestore.SimpleStore Fast, reliable storage. com.uber.simplestore.SimpleStoreConfig Configure executors used by SimpleStore. com.uber.simplestore.impl.SimpleStoreFactory Obtain a SimpleStore interface that can read and write into a namespace. com.uber.simplestore.SimpleStoreHelpers Useful wrappers for common storage operations. com.uber.simplestore.executors.StorageExecutors Like MoreExecutors, but no Guava. com.uber.simplestore.StoreClosedException Thrown when attempting to use a closed store.","title":"All Types"},{"location":"0.x/simplestore/com.uber.simplestore/","text":"simplestore / com.uber.simplestore Package com.uber.simplestore \u00b6 Types \u00b6 Name Summary NamespaceConfig class NamespaceConfig Configure how the store accesses a namespace. SimpleStore interface SimpleStore : Closeable Fast, reliable storage. SimpleStoreConfig class SimpleStoreConfig Configure executors used by SimpleStore. SimpleStoreHelpers class SimpleStoreHelpers Useful wrappers for common storage operations. Exceptions \u00b6 Name Summary StoreClosedException class StoreClosedException : RuntimeException Thrown when attempting to use a closed store.","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore/#package-comubersimplestore","text":"","title":"Package com.uber.simplestore"},{"location":"0.x/simplestore/com.uber.simplestore/#types","text":"Name Summary NamespaceConfig class NamespaceConfig Configure how the store accesses a namespace. SimpleStore interface SimpleStore : Closeable Fast, reliable storage. SimpleStoreConfig class SimpleStoreConfig Configure executors used by SimpleStore. SimpleStoreHelpers class SimpleStoreHelpers Useful wrappers for common storage operations.","title":"Types"},{"location":"0.x/simplestore/com.uber.simplestore/#exceptions","text":"Name Summary StoreClosedException class StoreClosedException : RuntimeException Thrown when attempting to use a closed store.","title":"Exceptions"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/","text":"simplestore / com.uber.simplestore / NamespaceConfig NamespaceConfig \u00b6 class NamespaceConfig Configure how the store accesses a namespace. Constructors \u00b6 Name Summary <init> NamespaceConfig() Configure how the store accesses a namespace. Properties \u00b6 Name Summary CACHE static val CACHE: NamespaceConfig ! Use the cache directory. CRITICAL static val CRITICAL: NamespaceConfig ! Opens a namespace as performance & integrity critical. DEFAULT static val DEFAULT: NamespaceConfig ! Default settings.","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/#namespaceconfig","text":"class NamespaceConfig Configure how the store accesses a namespace.","title":"NamespaceConfig"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/#constructors","text":"Name Summary <init> NamespaceConfig() Configure how the store accesses a namespace.","title":"Constructors"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/#properties","text":"Name Summary CACHE static val CACHE: NamespaceConfig ! Use the cache directory. CRITICAL static val CRITICAL: NamespaceConfig ! Opens a namespace as performance & integrity critical. DEFAULT static val DEFAULT: NamespaceConfig ! Default settings.","title":"Properties"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/-c-a-c-h-e/","text":"simplestore / com.uber.simplestore / NamespaceConfig / CACHE CACHE \u00b6 static val CACHE: NamespaceConfig ! Use the cache directory. Hides errors due to data corruption by returning a miss.","title":" c a c h e"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/-c-a-c-h-e/#cache","text":"static val CACHE: NamespaceConfig ! Use the cache directory. Hides errors due to data corruption by returning a miss.","title":"CACHE"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/-c-r-i-t-i-c-a-l/","text":"simplestore / com.uber.simplestore / NamespaceConfig / CRITICAL CRITICAL \u00b6 static val CRITICAL: NamespaceConfig ! Opens a namespace as performance & integrity critical. Bypasses future memory use optimizations.","title":" c r i t i c a l"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/-c-r-i-t-i-c-a-l/#critical","text":"static val CRITICAL: NamespaceConfig ! Opens a namespace as performance & integrity critical. Bypasses future memory use optimizations.","title":"CRITICAL"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/-d-e-f-a-u-l-t/","text":"simplestore / com.uber.simplestore / NamespaceConfig / DEFAULT DEFAULT \u00b6 static val DEFAULT: NamespaceConfig ! Default settings.","title":" d e f a u l t"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/-d-e-f-a-u-l-t/#default","text":"static val DEFAULT: NamespaceConfig ! Default settings.","title":"DEFAULT"},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/-init-/","text":"simplestore / com.uber.simplestore / NamespaceConfig / <init> <init> \u00b6 NamespaceConfig() Configure how the store accesses a namespace.","title":" init "},{"location":"0.x/simplestore/com.uber.simplestore/-namespace-config/-init-/#init","text":"NamespaceConfig() Configure how the store accesses a namespace.","title":"&lt;init&gt;"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/","text":"simplestore / com.uber.simplestore / SimpleStore SimpleStore \u00b6 interface SimpleStore : Closeable Fast, reliable storage. Functions \u00b6 Name Summary clear abstract fun clear(): ListenableFuture! Delete all keys in this direct namespace. close abstract fun close(): Unit Fails all outstanding operations then releases the memory cache. contains abstract fun contains(key: String !): ListenableFuture! Determine if a key exists in storage. deleteAllNow abstract fun deleteAllNow(): ListenableFuture! Recursively delete all keys in this scope and child scopes. Fails all outstanding operations on the stores. get abstract fun get(key: String !): ListenableFuture! Retrieve a byte[] from disk. getString abstract fun getString(key: String !): ListenableFuture! Retrieve a byte[]-backed String. put abstract fun put(key: String !, value: ByteArray !): ListenableFuture! Stores a byte[] on disk. putString abstract fun putString(key: String !, value: String !): ListenableFuture! Stores a String as a byte[]. remove abstract fun remove(key: String !): ListenableFuture! Removes a key from memory & disk. Inheritors \u00b6 Name Summary PrimitiveSimpleStore interface PrimitiveSimpleStore : SimpleStore Store primitives on disk.","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/#simplestore","text":"interface SimpleStore : Closeable Fast, reliable storage.","title":"SimpleStore"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/#functions","text":"Name Summary clear abstract fun clear(): ListenableFuture! Delete all keys in this direct namespace. close abstract fun close(): Unit Fails all outstanding operations then releases the memory cache. contains abstract fun contains(key: String !): ListenableFuture! Determine if a key exists in storage. deleteAllNow abstract fun deleteAllNow(): ListenableFuture! Recursively delete all keys in this scope and child scopes. Fails all outstanding operations on the stores. get abstract fun get(key: String !): ListenableFuture! Retrieve a byte[] from disk. getString abstract fun getString(key: String !): ListenableFuture! Retrieve a byte[]-backed String. put abstract fun put(key: String !, value: ByteArray !): ListenableFuture! Stores a byte[] on disk. putString abstract fun putString(key: String !, value: String !): ListenableFuture! Stores a String as a byte[]. remove abstract fun remove(key: String !): ListenableFuture! Removes a key from memory & disk.","title":"Functions"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/#inheritors","text":"Name Summary PrimitiveSimpleStore interface PrimitiveSimpleStore : SimpleStore Store primitives on disk.","title":"Inheritors"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/clear/","text":"simplestore / com.uber.simplestore / SimpleStore / clear clear \u00b6 abstract fun clear(): ListenableFuture! Delete all keys in this direct namespace.","title":"Clear"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/clear/#clear","text":"abstract fun clear(): ListenableFuture! Delete all keys in this direct namespace.","title":"clear"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/close/","text":"simplestore / com.uber.simplestore / SimpleStore / close close \u00b6 abstract fun close(): Unit Fails all outstanding operations then releases the memory cache.","title":"Close"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/close/#close","text":"abstract fun close(): Unit Fails all outstanding operations then releases the memory cache.","title":"close"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/contains/","text":"simplestore / com.uber.simplestore / SimpleStore / contains contains \u00b6 abstract fun contains(key: String !): ListenableFuture! Determine if a key exists in storage. Parameters \u00b6 key - String !: to check Return ListenableFuture!: if key is set","title":"Contains"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/contains/#contains","text":"abstract fun contains(key: String !): ListenableFuture! Determine if a key exists in storage.","title":"contains"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/contains/#parameters","text":"key - String !: to check Return ListenableFuture!: if key is set","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/delete-all-now/","text":"simplestore / com.uber.simplestore / SimpleStore / deleteAllNow deleteAllNow \u00b6 abstract fun deleteAllNow(): ListenableFuture! Recursively delete all keys in this scope and child scopes. Fails all outstanding operations on the stores.","title":"Delete all now"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/delete-all-now/#deleteallnow","text":"abstract fun deleteAllNow(): ListenableFuture! Recursively delete all keys in this scope and child scopes. Fails all outstanding operations on the stores.","title":"deleteAllNow"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/get-string/","text":"simplestore / com.uber.simplestore / SimpleStore / getString getString \u00b6 abstract fun getString(key: String !): ListenableFuture! Retrieve a byte[]-backed String. Parameters \u00b6 key - String !: to fetch from","title":"Get string"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/get-string/#getstring","text":"abstract fun getString(key: String !): ListenableFuture! Retrieve a byte[]-backed String.","title":"getString"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/get-string/#parameters","text":"key - String !: to fetch from","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/get/","text":"simplestore / com.uber.simplestore / SimpleStore / get get \u00b6 abstract fun get(key: String !): ListenableFuture! Retrieve a byte[] from disk. Parameters \u00b6 key - String !: to read from Return ListenableFuture!: value if present, empty array if absent","title":"Get"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/get/#get","text":"abstract fun get(key: String !): ListenableFuture! Retrieve a byte[] from disk.","title":"get"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/get/#parameters","text":"key - String !: to read from Return ListenableFuture!: value if present, empty array if absent","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/put-string/","text":"simplestore / com.uber.simplestore / SimpleStore / putString putString \u00b6 abstract fun putString(key: String !, value: String !): ListenableFuture! Stores a String as a byte[]. Parameters \u00b6 key - String !: to store to value - String !: to write","title":"Put string"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/put-string/#putstring","text":"abstract fun putString(key: String !, value: String !): ListenableFuture! Stores a String as a byte[].","title":"putString"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/put-string/#parameters","text":"key - String !: to store to value - String !: to write","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/put/","text":"simplestore / com.uber.simplestore / SimpleStore / put put \u00b6 abstract fun put(key: String !, value: ByteArray !): ListenableFuture! Stores a byte[] on disk. Parameters \u00b6 key - String !: to store to value - ByteArray !: to store","title":"Put"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/put/#put","text":"abstract fun put(key: String !, value: ByteArray !): ListenableFuture! Stores a byte[] on disk.","title":"put"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/put/#parameters","text":"key - String !: to store to value - ByteArray !: to store","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/remove/","text":"simplestore / com.uber.simplestore / SimpleStore / remove remove \u00b6 abstract fun remove(key: String !): ListenableFuture! Removes a key from memory & disk. Parameters \u00b6 key - String !: to remove Return ListenableFuture!: when complete","title":"Remove"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/remove/#remove","text":"abstract fun remove(key: String !): ListenableFuture! Removes a key from memory & disk.","title":"remove"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store/remove/#parameters","text":"key - String !: to remove Return ListenableFuture!: when complete","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/","text":"simplestore / com.uber.simplestore / SimpleStoreConfig SimpleStoreConfig \u00b6 class SimpleStoreConfig Configure executors used by SimpleStore. Set may only be called once, and should be called before any use of stores. Functions \u00b6 Name Summary getComputationExecutor static fun getComputationExecutor(): Executor ! getIOExecutor static fun getIOExecutor(): Executor ! setComputationExecutor static fun setComputationExecutor(executor: Executor !): Unit Override the executor used for computation. setIOExecutor static fun setIOExecutor(executor: Executor !): Unit Override the executor used for IO operations.","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/#simplestoreconfig","text":"class SimpleStoreConfig Configure executors used by SimpleStore. Set may only be called once, and should be called before any use of stores.","title":"SimpleStoreConfig"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/#functions","text":"Name Summary getComputationExecutor static fun getComputationExecutor(): Executor ! getIOExecutor static fun getIOExecutor(): Executor ! setComputationExecutor static fun setComputationExecutor(executor: Executor !): Unit Override the executor used for computation. setIOExecutor static fun setIOExecutor(executor: Executor !): Unit Override the executor used for IO operations.","title":"Functions"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/get-computation-executor/","text":"simplestore / com.uber.simplestore / SimpleStoreConfig / getComputationExecutor getComputationExecutor \u00b6 static fun getComputationExecutor(): Executor !","title":"Get computation executor"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/get-computation-executor/#getcomputationexecutor","text":"static fun getComputationExecutor(): Executor !","title":"getComputationExecutor"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/get-i-o-executor/","text":"simplestore / com.uber.simplestore / SimpleStoreConfig / getIOExecutor getIOExecutor \u00b6 static fun getIOExecutor(): Executor !","title":"Get i o executor"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/get-i-o-executor/#getioexecutor","text":"static fun getIOExecutor(): Executor !","title":"getIOExecutor"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/set-computation-executor/","text":"simplestore / com.uber.simplestore / SimpleStoreConfig / setComputationExecutor setComputationExecutor \u00b6 static fun setComputationExecutor(executor: Executor !): Unit Override the executor used for computation. Parameters \u00b6 executor - Executor !: to set, null unsets.","title":"Set computation executor"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/set-computation-executor/#setcomputationexecutor","text":"static fun setComputationExecutor(executor: Executor !): Unit Override the executor used for computation.","title":"setComputationExecutor"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/set-computation-executor/#parameters","text":"executor - Executor !: to set, null unsets.","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/set-i-o-executor/","text":"simplestore / com.uber.simplestore / SimpleStoreConfig / setIOExecutor setIOExecutor \u00b6 static fun setIOExecutor(executor: Executor !): Unit Override the executor used for IO operations. Parameters \u00b6 executor - Executor !: to set, null unsets.","title":"Set i o executor"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/set-i-o-executor/#setioexecutor","text":"static fun setIOExecutor(executor: Executor !): Unit Override the executor used for IO operations.","title":"setIOExecutor"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-config/set-i-o-executor/#parameters","text":"executor - Executor !: to set, null unsets.","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-helpers/","text":"simplestore / com.uber.simplestore / SimpleStoreHelpers SimpleStoreHelpers \u00b6 class SimpleStoreHelpers Useful wrappers for common storage operations. Constructors \u00b6 Name Summary <init> SimpleStoreHelpers() Useful wrappers for common storage operations. Functions \u00b6 Name Summary prefetch static fun prefetch(store: SimpleStore !, vararg keys: String !): Unit Prefetch specified keys into the memory cache.","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-helpers/#simplestorehelpers","text":"class SimpleStoreHelpers Useful wrappers for common storage operations.","title":"SimpleStoreHelpers"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-helpers/#constructors","text":"Name Summary <init> SimpleStoreHelpers() Useful wrappers for common storage operations.","title":"Constructors"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-helpers/#functions","text":"Name Summary prefetch static fun prefetch(store: SimpleStore !, vararg keys: String !): Unit Prefetch specified keys into the memory cache.","title":"Functions"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-helpers/-init-/","text":"simplestore / com.uber.simplestore / SimpleStoreHelpers / <init> <init> \u00b6 SimpleStoreHelpers() Useful wrappers for common storage operations.","title":" init "},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-helpers/-init-/#init","text":"SimpleStoreHelpers() Useful wrappers for common storage operations.","title":"&lt;init&gt;"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-helpers/prefetch/","text":"simplestore / com.uber.simplestore / SimpleStoreHelpers / prefetch prefetch \u00b6 static fun prefetch(store: SimpleStore !, vararg keys: String !): Unit Prefetch specified keys into the memory cache. Parameters \u00b6 store - SimpleStore !: to warm keys - String !: to fetch","title":"Prefetch"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-helpers/prefetch/#prefetch","text":"static fun prefetch(store: SimpleStore !, vararg keys: String !): Unit Prefetch specified keys into the memory cache.","title":"prefetch"},{"location":"0.x/simplestore/com.uber.simplestore/-simple-store-helpers/prefetch/#parameters","text":"store - SimpleStore !: to warm keys - String !: to fetch","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore/-store-closed-exception/","text":"simplestore / com.uber.simplestore / StoreClosedException StoreClosedException \u00b6 class StoreClosedException : RuntimeException Thrown when attempting to use a closed store. Constructors \u00b6 Name Summary <init> StoreClosedException() StoreClosedException(message: String !)","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore/-store-closed-exception/#storeclosedexception","text":"class StoreClosedException : RuntimeException Thrown when attempting to use a closed store.","title":"StoreClosedException"},{"location":"0.x/simplestore/com.uber.simplestore/-store-closed-exception/#constructors","text":"Name Summary <init> StoreClosedException() StoreClosedException(message: String !)","title":"Constructors"},{"location":"0.x/simplestore/com.uber.simplestore/-store-closed-exception/-init-/","text":"simplestore / com.uber.simplestore / StoreClosedException / <init> <init> \u00b6 StoreClosedException() StoreClosedException(message: String !)","title":" init "},{"location":"0.x/simplestore/com.uber.simplestore/-store-closed-exception/-init-/#init","text":"StoreClosedException() StoreClosedException(message: String !)","title":"&lt;init&gt;"},{"location":"0.x/simplestore/com.uber.simplestore.executors/","text":"simplestore / com.uber.simplestore.executors Package com.uber.simplestore.executors \u00b6 Types \u00b6 Name Summary StorageExecutors class StorageExecutors Like MoreExecutors, but no Guava.","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore.executors/#package-comubersimplestoreexecutors","text":"","title":"Package com.uber.simplestore.executors"},{"location":"0.x/simplestore/com.uber.simplestore.executors/#types","text":"Name Summary StorageExecutors class StorageExecutors Like MoreExecutors, but no Guava.","title":"Types"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/","text":"simplestore / com.uber.simplestore.executors / StorageExecutors StorageExecutors \u00b6 class StorageExecutors Like MoreExecutors, but no Guava. Constructors \u00b6 Name Summary <init> StorageExecutors() Like MoreExecutors, but no Guava. Functions \u00b6 Name Summary computationExecutor static fun computationExecutor(): Executor ! ioExecutor static fun ioExecutor(): Executor ! mainExecutor static fun mainExecutor(): Executor !","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/#storageexecutors","text":"class StorageExecutors Like MoreExecutors, but no Guava.","title":"StorageExecutors"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/#constructors","text":"Name Summary <init> StorageExecutors() Like MoreExecutors, but no Guava.","title":"Constructors"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/#functions","text":"Name Summary computationExecutor static fun computationExecutor(): Executor ! ioExecutor static fun ioExecutor(): Executor ! mainExecutor static fun mainExecutor(): Executor !","title":"Functions"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/-init-/","text":"simplestore / com.uber.simplestore.executors / StorageExecutors / <init> <init> \u00b6 StorageExecutors() Like MoreExecutors, but no Guava.","title":" init "},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/-init-/#init","text":"StorageExecutors() Like MoreExecutors, but no Guava.","title":"&lt;init&gt;"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/computation-executor/","text":"simplestore / com.uber.simplestore.executors / StorageExecutors / computationExecutor computationExecutor \u00b6 static fun computationExecutor(): Executor !","title":"Computation executor"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/computation-executor/#computationexecutor","text":"static fun computationExecutor(): Executor !","title":"computationExecutor"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/io-executor/","text":"simplestore / com.uber.simplestore.executors / StorageExecutors / ioExecutor ioExecutor \u00b6 static fun ioExecutor(): Executor !","title":"Io executor"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/io-executor/#ioexecutor","text":"static fun ioExecutor(): Executor !","title":"ioExecutor"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/main-executor/","text":"simplestore / com.uber.simplestore.executors / StorageExecutors / mainExecutor mainExecutor \u00b6 static fun mainExecutor(): Executor !","title":"Main executor"},{"location":"0.x/simplestore/com.uber.simplestore.executors/-storage-executors/main-executor/#mainexecutor","text":"static fun mainExecutor(): Executor !","title":"mainExecutor"},{"location":"0.x/simplestore/com.uber.simplestore.impl/","text":"simplestore / com.uber.simplestore.impl Package com.uber.simplestore.impl \u00b6 Types \u00b6 Name Summary SimpleStoreFactory class SimpleStoreFactory Obtain a SimpleStore interface that can read and write into a namespace.","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore.impl/#package-comubersimplestoreimpl","text":"","title":"Package com.uber.simplestore.impl"},{"location":"0.x/simplestore/com.uber.simplestore.impl/#types","text":"Name Summary SimpleStoreFactory class SimpleStoreFactory Obtain a SimpleStore interface that can read and write into a namespace.","title":"Types"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/","text":"simplestore / com.uber.simplestore.impl / SimpleStoreFactory SimpleStoreFactory \u00b6 class SimpleStoreFactory Obtain a SimpleStore interface that can read and write into a namespace. Only one instance per namespace may exist at any time to guarentee FIFO-ordering within the namespace. A namespace is a set of /-delimited strings that refer to a logical location on disk. It is recommended a random UUID be used to both prevent collisions and to obfuscate the contents on disk from rooted users. Constructors \u00b6 Name Summary <init> SimpleStoreFactory() Obtain a SimpleStore interface that can read and write into a namespace. Functions \u00b6 Name Summary crashIfAnyOpen static fun crashIfAnyOpen(): Unit create static fun create(context: Context!, namespace: String !): SimpleStore ! Obtain a store for a namespace with default configuration. static fun create(context: Context!, namespace: String !, config: NamespaceConfig !): SimpleStore ! Obtain a store for a namespace.","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/#simplestorefactory","text":"class SimpleStoreFactory Obtain a SimpleStore interface that can read and write into a namespace. Only one instance per namespace may exist at any time to guarentee FIFO-ordering within the namespace. A namespace is a set of /-delimited strings that refer to a logical location on disk. It is recommended a random UUID be used to both prevent collisions and to obfuscate the contents on disk from rooted users.","title":"SimpleStoreFactory"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/#constructors","text":"Name Summary <init> SimpleStoreFactory() Obtain a SimpleStore interface that can read and write into a namespace.","title":"Constructors"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/#functions","text":"Name Summary crashIfAnyOpen static fun crashIfAnyOpen(): Unit create static fun create(context: Context!, namespace: String !): SimpleStore ! Obtain a store for a namespace with default configuration. static fun create(context: Context!, namespace: String !, config: NamespaceConfig !): SimpleStore ! Obtain a store for a namespace.","title":"Functions"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/-init-/","text":"simplestore / com.uber.simplestore.impl / SimpleStoreFactory / <init> <init> \u00b6 SimpleStoreFactory() Obtain a SimpleStore interface that can read and write into a namespace. Only one instance per namespace may exist at any time to guarentee FIFO-ordering within the namespace. A namespace is a set of /-delimited strings that refer to a logical location on disk. It is recommended a random UUID be used to both prevent collisions and to obfuscate the contents on disk from rooted users.","title":" init "},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/-init-/#init","text":"SimpleStoreFactory() Obtain a SimpleStore interface that can read and write into a namespace. Only one instance per namespace may exist at any time to guarentee FIFO-ordering within the namespace. A namespace is a set of /-delimited strings that refer to a logical location on disk. It is recommended a random UUID be used to both prevent collisions and to obfuscate the contents on disk from rooted users.","title":"&lt;init&gt;"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/crash-if-any-open/","text":"simplestore / com.uber.simplestore.impl / SimpleStoreFactory / crashIfAnyOpen crashIfAnyOpen \u00b6 static fun crashIfAnyOpen(): Unit","title":"Crash if any open"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/crash-if-any-open/#crashifanyopen","text":"static fun crashIfAnyOpen(): Unit","title":"crashIfAnyOpen"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/create/","text":"simplestore / com.uber.simplestore.impl / SimpleStoreFactory / create create \u00b6 static fun create(context: Context!, namespace: String !): SimpleStore ! Obtain a store for a namespace with default configuration. Parameters \u00b6 context - Context!: to store in namespace - String !: forward-slash delimited logical address Return SimpleStore !: open store static fun create(context: Context!, namespace: String !, config: NamespaceConfig !): SimpleStore ! Obtain a store for a namespace. Parameters \u00b6 context - Context!: to store in namespace - String !: forward-slash delimited logical address config - NamespaceConfig !: to use Return SimpleStore !: open store","title":"Create"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/create/#create","text":"static fun create(context: Context!, namespace: String !): SimpleStore ! Obtain a store for a namespace with default configuration.","title":"create"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/create/#parameters","text":"context - Context!: to store in namespace - String !: forward-slash delimited logical address Return SimpleStore !: open store static fun create(context: Context!, namespace: String !, config: NamespaceConfig !): SimpleStore ! Obtain a store for a namespace.","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore.impl/-simple-store-factory/create/#parameters_1","text":"context - Context!: to store in namespace - String !: forward-slash delimited logical address config - NamespaceConfig !: to use Return SimpleStore !: open store","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/","text":"simplestore / com.uber.simplestore.primitive Package com.uber.simplestore.primitive \u00b6 Types \u00b6 Name Summary PrimitiveSimpleStore interface PrimitiveSimpleStore : SimpleStore Store primitives on disk. PrimitiveSimpleStoreFactory class PrimitiveSimpleStoreFactory","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/#package-comubersimplestoreprimitive","text":"","title":"Package com.uber.simplestore.primitive"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/#types","text":"Name Summary PrimitiveSimpleStore interface PrimitiveSimpleStore : SimpleStore Store primitives on disk. PrimitiveSimpleStoreFactory class PrimitiveSimpleStoreFactory","title":"Types"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStore PrimitiveSimpleStore \u00b6 interface PrimitiveSimpleStore : SimpleStore Store primitives on disk. All methods never return null in the ListenableFuture, # `[ SimpleStore#contains(String)`](../../com.uber.simplestore/-simple-store/contains.md) should be used for optionality. If the value is not set, the 0-byte primitive will be returned. Functions \u00b6 Name Summary getBoolean abstract fun getBoolean(key: String !): ListenableFuture! getDouble abstract fun getDouble(key: String !): ListenableFuture! getInt abstract fun getInt(key: String !): ListenableFuture! getLong abstract fun getLong(key: String !): ListenableFuture! getString abstract fun getString(key: String !): ListenableFuture! Retrieves a # `[ java.nio.charset.StandardCharsets#UTF_16BE`]( https://developer.android.com/reference/java/nio/charset/StandardCharsets.html#UTF_16BE ) string. put abstract fun put(key: String !, value: Int ): ListenableFuture! abstract fun put(key: String !, value: Long ): ListenableFuture! abstract fun put(key: String !, value: Boolean ): ListenableFuture! abstract fun put(key: String !, value: Double ): ListenableFuture!``abstract fun put(key: String !, value: String !): ListenableFuture! Store string as # `[ java.nio.charset.StandardCharsets#UTF_16BE`]( https://developer.android.com/reference/java/nio/charset/StandardCharsets.html#UTF_16BE ). remove abstract fun remove(key: String !): ListenableFuture! Inherited Functions \u00b6 Name Summary clear abstract fun clear(): ListenableFuture! Delete all keys in this direct namespace. close abstract fun close(): Unit Fails all outstanding operations then releases the memory cache. contains abstract fun contains(key: String !): ListenableFuture! Determine if a key exists in storage. deleteAllNow abstract fun deleteAllNow(): ListenableFuture! Recursively delete all keys in this scope and child scopes. Fails all outstanding operations on the stores. get abstract fun get(key: String !): ListenableFuture! Retrieve a byte[] from disk. put abstract fun put(key: String !, value: ByteArray !): ListenableFuture! Stores a byte[] on disk. putString abstract fun putString(key: String !, value: String !): ListenableFuture! Stores a String as a byte[].","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/#primitivesimplestore","text":"interface PrimitiveSimpleStore : SimpleStore Store primitives on disk. All methods never return null in the ListenableFuture, # `[ SimpleStore#contains(String)`](../../com.uber.simplestore/-simple-store/contains.md) should be used for optionality. If the value is not set, the 0-byte primitive will be returned.","title":"PrimitiveSimpleStore"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/#functions","text":"Name Summary getBoolean abstract fun getBoolean(key: String !): ListenableFuture! getDouble abstract fun getDouble(key: String !): ListenableFuture! getInt abstract fun getInt(key: String !): ListenableFuture! getLong abstract fun getLong(key: String !): ListenableFuture! getString abstract fun getString(key: String !): ListenableFuture! Retrieves a # `[ java.nio.charset.StandardCharsets#UTF_16BE`]( https://developer.android.com/reference/java/nio/charset/StandardCharsets.html#UTF_16BE ) string. put abstract fun put(key: String !, value: Int ): ListenableFuture! abstract fun put(key: String !, value: Long ): ListenableFuture! abstract fun put(key: String !, value: Boolean ): ListenableFuture! abstract fun put(key: String !, value: Double ): ListenableFuture!``abstract fun put(key: String !, value: String !): ListenableFuture! Store string as # `[ java.nio.charset.StandardCharsets#UTF_16BE`]( https://developer.android.com/reference/java/nio/charset/StandardCharsets.html#UTF_16BE ). remove abstract fun remove(key: String !): ListenableFuture!","title":"Functions"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/#inherited-functions","text":"Name Summary clear abstract fun clear(): ListenableFuture! Delete all keys in this direct namespace. close abstract fun close(): Unit Fails all outstanding operations then releases the memory cache. contains abstract fun contains(key: String !): ListenableFuture! Determine if a key exists in storage. deleteAllNow abstract fun deleteAllNow(): ListenableFuture! Recursively delete all keys in this scope and child scopes. Fails all outstanding operations on the stores. get abstract fun get(key: String !): ListenableFuture! Retrieve a byte[] from disk. put abstract fun put(key: String !, value: ByteArray !): ListenableFuture! Stores a byte[] on disk. putString abstract fun putString(key: String !, value: String !): ListenableFuture! Stores a String as a byte[].","title":"Inherited Functions"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-boolean/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStore / getBoolean getBoolean \u00b6 abstract fun getBoolean(key: String !): ListenableFuture!","title":"Get boolean"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-boolean/#getboolean","text":"abstract fun getBoolean(key: String !): ListenableFuture!","title":"getBoolean"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-double/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStore / getDouble getDouble \u00b6 abstract fun getDouble(key: String !): ListenableFuture!","title":"Get double"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-double/#getdouble","text":"abstract fun getDouble(key: String !): ListenableFuture!","title":"getDouble"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-int/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStore / getInt getInt \u00b6 abstract fun getInt(key: String !): ListenableFuture!","title":"Get int"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-int/#getint","text":"abstract fun getInt(key: String !): ListenableFuture!","title":"getInt"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-long/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStore / getLong getLong \u00b6 abstract fun getLong(key: String !): ListenableFuture!","title":"Get long"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-long/#getlong","text":"abstract fun getLong(key: String !): ListenableFuture!","title":"getLong"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-string/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStore / getString getString \u00b6 abstract fun getString(key: String !): ListenableFuture! Overrides SimpleStore.getString Retrieves a # `[ java.nio.charset.StandardCharsets#UTF_16BE`]( https://developer.android.com/reference/java/nio/charset/StandardCharsets.html#UTF_16BE ) string. Parameters \u00b6 key - String !: to fetch from Return ListenableFuture!: value if present, otherwise \u201c\u201d","title":"Get string"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-string/#getstring","text":"abstract fun getString(key: String !): ListenableFuture! Overrides SimpleStore.getString Retrieves a # `[ java.nio.charset.StandardCharsets#UTF_16BE`]( https://developer.android.com/reference/java/nio/charset/StandardCharsets.html#UTF_16BE ) string.","title":"getString"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/get-string/#parameters","text":"key - String !: to fetch from Return ListenableFuture!: value if present, otherwise \u201c\u201d","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/put/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStore / put put \u00b6 abstract fun put(key: String !, value: Int ): ListenableFuture! abstract fun put(key: String !, value: Long ): ListenableFuture! abstract fun put(key: String !, value: Boolean ): ListenableFuture! abstract fun put(key: String !, value: Double ): ListenableFuture!``abstract fun put(key: String !, value: String !): ListenableFuture! Store string as # `[ java.nio.charset.StandardCharsets#UTF_16BE`]( https://developer.android.com/reference/java/nio/charset/StandardCharsets.html#UTF_16BE ). Putting \u201c\u201d will remove the value from disk. Parameters \u00b6 key - String !: name value - String !: to store Return ListenableFuture!: stored value","title":"Put"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/put/#put","text":"abstract fun put(key: String !, value: Int ): ListenableFuture! abstract fun put(key: String !, value: Long ): ListenableFuture! abstract fun put(key: String !, value: Boolean ): ListenableFuture! abstract fun put(key: String !, value: Double ): ListenableFuture!``abstract fun put(key: String !, value: String !): ListenableFuture! Store string as # `[ java.nio.charset.StandardCharsets#UTF_16BE`]( https://developer.android.com/reference/java/nio/charset/StandardCharsets.html#UTF_16BE ). Putting \u201c\u201d will remove the value from disk.","title":"put"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/put/#parameters","text":"key - String !: name value - String !: to store Return ListenableFuture!: stored value","title":"Parameters"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/remove/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStore / remove remove \u00b6 abstract fun remove(key: String !): ListenableFuture! Overrides SimpleStore.remove","title":"Remove"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store/remove/#remove","text":"abstract fun remove(key: String !): ListenableFuture! Overrides SimpleStore.remove","title":"remove"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store-factory/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStoreFactory PrimitiveSimpleStoreFactory \u00b6 class PrimitiveSimpleStoreFactory Constructors \u00b6 Name Summary <init> PrimitiveSimpleStoreFactory() Functions \u00b6 Name Summary create static fun create(context: Context!, namespace: String !): PrimitiveSimpleStore ! static fun create(context: Context!, namespace: String !, config: NamespaceConfig !): PrimitiveSimpleStore !","title":"Index"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store-factory/#primitivesimplestorefactory","text":"class PrimitiveSimpleStoreFactory","title":"PrimitiveSimpleStoreFactory"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store-factory/#constructors","text":"Name Summary <init> PrimitiveSimpleStoreFactory()","title":"Constructors"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store-factory/#functions","text":"Name Summary create static fun create(context: Context!, namespace: String !): PrimitiveSimpleStore ! static fun create(context: Context!, namespace: String !, config: NamespaceConfig !): PrimitiveSimpleStore !","title":"Functions"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store-factory/-init-/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStoreFactory / <init> <init> \u00b6 PrimitiveSimpleStoreFactory()","title":" init "},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store-factory/-init-/#init","text":"PrimitiveSimpleStoreFactory()","title":"&lt;init&gt;"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store-factory/create/","text":"simplestore / com.uber.simplestore.primitive / PrimitiveSimpleStoreFactory / create create \u00b6 static fun create(context: Context!, namespace: String !): PrimitiveSimpleStore ! static fun create(context: Context!, namespace: String !, config: NamespaceConfig !): PrimitiveSimpleStore !","title":"Create"},{"location":"0.x/simplestore/com.uber.simplestore.primitive/-primitive-simple-store-factory/create/#create","text":"static fun create(context: Context!, namespace: String !): PrimitiveSimpleStore ! static fun create(context: Context!, namespace: String !, config: NamespaceConfig !): PrimitiveSimpleStore !","title":"create"},{"location":"0.x/testing/","text":"testing Packages \u00b6 Name Summary com.uber.simplestore.fakes Index \u00b6 All Types","title":"Testing SimpleStore"},{"location":"0.x/testing/#packages","text":"Name Summary com.uber.simplestore.fakes","title":"Packages"},{"location":"0.x/testing/#index","text":"All Types","title":"Index"},{"location":"0.x/testing/alltypes/","text":"All Types \u00b6 Name Summary com.uber.simplestore.fakes.FakeSimpleStore","title":"Index"},{"location":"0.x/testing/alltypes/#all-types","text":"Name Summary com.uber.simplestore.fakes.FakeSimpleStore","title":"All Types"},{"location":"0.x/testing/com.uber.simplestore.fakes/","text":"testing / com.uber.simplestore.fakes Package com.uber.simplestore.fakes \u00b6 Types \u00b6 Name Summary FakeSimpleStore class FakeSimpleStore : SimpleStore","title":"Index"},{"location":"0.x/testing/com.uber.simplestore.fakes/#package-comubersimplestorefakes","text":"","title":"Package com.uber.simplestore.fakes"},{"location":"0.x/testing/com.uber.simplestore.fakes/#types","text":"Name Summary FakeSimpleStore class FakeSimpleStore : SimpleStore","title":"Types"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore FakeSimpleStore \u00b6 class FakeSimpleStore : SimpleStore Constructors \u00b6 Name Summary <init> FakeSimpleStore() Functions \u00b6 Name Summary clear fun clear(): ListenableFuture! close fun close(): Unit contains fun contains(key: String !): ListenableFuture! deleteAllNow fun deleteAllNow(): ListenableFuture! get fun get(key: String !): ListenableFuture! getString fun getString(key: String !): ListenableFuture! put fun put(key: String !, value: ByteArray !): ListenableFuture! putString fun putString(key: String !, value: String !): ListenableFuture! remove fun remove(key: String !): ListenableFuture! setFailureType fun setFailureType(e: Throwable !): Unit","title":"Index"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/#fakesimplestore","text":"class FakeSimpleStore : SimpleStore","title":"FakeSimpleStore"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/#constructors","text":"Name Summary <init> FakeSimpleStore()","title":"Constructors"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/#functions","text":"Name Summary clear fun clear(): ListenableFuture! close fun close(): Unit contains fun contains(key: String !): ListenableFuture! deleteAllNow fun deleteAllNow(): ListenableFuture! get fun get(key: String !): ListenableFuture! getString fun getString(key: String !): ListenableFuture! put fun put(key: String !, value: ByteArray !): ListenableFuture! putString fun putString(key: String !, value: String !): ListenableFuture! remove fun remove(key: String !): ListenableFuture! setFailureType fun setFailureType(e: Throwable !): Unit","title":"Functions"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/-init-/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / <init> <init> \u00b6 FakeSimpleStore()","title":" init "},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/-init-/#init","text":"FakeSimpleStore()","title":"&lt;init&gt;"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/clear/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / clear clear \u00b6 fun clear(): ListenableFuture!","title":"Clear"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/clear/#clear","text":"fun clear(): ListenableFuture!","title":"clear"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/close/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / close close \u00b6 fun close(): Unit","title":"Close"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/close/#close","text":"fun close(): Unit","title":"close"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/contains/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / contains contains \u00b6 fun contains(key: String !): ListenableFuture!","title":"Contains"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/contains/#contains","text":"fun contains(key: String !): ListenableFuture!","title":"contains"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/delete-all-now/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / deleteAllNow deleteAllNow \u00b6 fun deleteAllNow(): ListenableFuture!","title":"Delete all now"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/delete-all-now/#deleteallnow","text":"fun deleteAllNow(): ListenableFuture!","title":"deleteAllNow"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/get-string/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / getString getString \u00b6 fun getString(key: String !): ListenableFuture!","title":"Get string"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/get-string/#getstring","text":"fun getString(key: String !): ListenableFuture!","title":"getString"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/get/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / get get \u00b6 fun get(key: String !): ListenableFuture!","title":"Get"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/get/#get","text":"fun get(key: String !): ListenableFuture!","title":"get"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/put-string/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / putString putString \u00b6 fun putString(key: String !, value: String !): ListenableFuture!","title":"Put string"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/put-string/#putstring","text":"fun putString(key: String !, value: String !): ListenableFuture!","title":"putString"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/put/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / put put \u00b6 fun put(key: String !, value: ByteArray !): ListenableFuture!","title":"Put"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/put/#put","text":"fun put(key: String !, value: ByteArray !): ListenableFuture!","title":"put"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/remove/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / remove remove \u00b6 fun remove(key: String !): ListenableFuture!","title":"Remove"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/remove/#remove","text":"fun remove(key: String !): ListenableFuture!","title":"remove"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/set-failure-type/","text":"testing / com.uber.simplestore.fakes / FakeSimpleStore / setFailureType setFailureType \u00b6 fun setFailureType(e: Throwable !): Unit","title":"Set failure type"},{"location":"0.x/testing/com.uber.simplestore.fakes/-fake-simple-store/set-failure-type/#setfailuretype","text":"fun setFailureType(e: Throwable !): Unit","title":"setFailureType"}]}